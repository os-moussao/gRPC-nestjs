// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v5.26.1
// source: bitwise.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { IntArray } from "./common";
import { Int64Value } from "./google/protobuf/wrappers";

export const protobufPackage = "bitwise";

export const BITWISE_PACKAGE_NAME = "bitwise";

export interface BitwiseServiceClient {
  and(request: IntArray): Observable<Int64Value>;

  or(request: IntArray): Observable<Int64Value>;

  xor(request: IntArray): Observable<Int64Value>;
}

export interface BitwiseServiceController {
  and(request: IntArray): Promise<Int64Value> | Observable<Int64Value> | Int64Value;

  or(request: IntArray): Promise<Int64Value> | Observable<Int64Value> | Int64Value;

  xor(request: IntArray): Promise<Int64Value> | Observable<Int64Value> | Int64Value;
}

export function BitwiseServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["and", "or", "xor"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BitwiseService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BitwiseService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BITWISE_SERVICE_NAME = "BitwiseService";
